#include<stdio.h>
int l,r;
void merge(int a[],int l,int m,int r)
{
    int i,j,k;
    int n1=m-l+1;
    int n2=r-m;
    int L[n1],R[n2];
    for (i = 0; i < n1; i++)
    {
        L[i] = a[l + i];
    }
    for (j = 0; j < n2; j++)
    {
        R[j] = a[m + 1 + j];
    }
    i = 0;
    j = 0;
    k = l;
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j]) {
            a[k] = L[i];
            i++;
        }
        else
        {
            a[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1)
    {
        a[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) 
    {
        a[k] = R[j];
        j++;
        k++;
    }
}
void msort(int a[],int l,int r)
{
   if(l<r)
   {
       int m=(l+r)/2;
       msort(a,l,m);
       msort(a,m+1,r);
       merge(a,l,m,r);
   }
}
int main()
{
    int a[10],n;
    printf("Enter size of array:");
    scanf("%d",&n);
    printf("Enter array elements:");
    for (int i=0; i<n; i++)
    {
         scanf("%d",&a[i]);
    }
    printf("The array elements are:");
    for (int i=0; i<n; i++)
    {
         printf("%d ",a[i]);
    }
    msort(a,0,n-1);
    printf("\nthe sorted array is:");
    for (int i=0; i<n; i++)
    {
         printf("%d ",a[i]);
    }
    return 0;
}
_________________________________________________________________________________________




#include<stdio.h>
#define INF 9999
#define n 4
void fldwarsh(int matrix[][n])
{
    int matrix[4][4],i,j,k;
    for(k=0;k<n;k++){
        for(i=0;i<n;i++){
            for(j=0;j<n;j++)
            {
                if(matrix[i][j]>(matrix[i][k]+matrix[k][j]))
                    matrix[i][j]=matrix[i][k]+matrix[k][j];
            }
        }
    }
    printmatrix(matrix);
}
void printmatrix(int matrix[n][n])
{
    int i,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(matrix[i][j]==INF)
                printf("%s\t",INF);
            else
                printf("%d\t",matrix[i][j]);
        }
        printf(" \n");
    }
}

int main()
{
    int graph[n][n]={{0,3,INF,5},
 		{2,0,INF,4},
		{INF,1,0,INF},
		{INF,INF,2,0}};
    fldwarsh(graph);
}

_________________________________________________________________________________________--




#include<stdio.h>
void  knapsack(int n,float w[],float p[],float cap)
{
    float r[20],tp=0,u;
    int i,j;
    u=cap;
    for (i=0;i<n;i++){
        r[i]=0.0;
    }
    for (i=0;i<n;i++)
    {
        if(w[i]>u){
            break;
        }
        else
        {
            r[i]=1.0;
            tp= tp+p[i];
            u=u-w[i];
        }
    }
    if(i<n)
    {
        r[i]=u/w[i];
    }
    tp= tp + (r[i]*p[i]);
    printf("m Maximum profit is: %f", tp);
}
int main()
{
    float w[10],p[10],cap,x[10];
    int i,j,n;
    float t;
    printf("enter no of objects:");
    scanf("%d",&n);
    printf("enter profit and weights of each object:");
    for(i=0;i<n;i++){
         scanf("%f %f",&p[i],&w[i]);
    }
    printf("enter capacity of knapsack:");
    scanf("%f",&cap);
    for(i=0;i<n;i++){
        x[i]=p[i]/w[i];
        
    } 
    for(i=0;i<n;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(x[i]<x[j])
            {
                t=x[j];
                x[j]=x[i];
                x[i]=t;
               
                t=w[j];
                w[j]=w[i];
                w[i]=t;
               
                t=p[j];
                p[j]=p[i];
                p[i]=t;
                
            }
        }
    }
    knapsack(n,w,p,cap);
}

___________________________________________________________________________________________


#include<stdio.h>                                                      
void create(int arr[20][20],int n)                                          
{                                                                          
    for(int i=0;i<n;i++)
    {                                                                  
        for(int j=0;j<n;j++)                                                
        {                                                          
            printf("enter cost");                              
            scanf("%d",&arr[i][j]);                                    
        }
    }
}
void display(int arr[20][20],int n)                                        
{                                                                          
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)                                                
        {                                                          
            printf("%d ",arr[i][j]);                                        
        }                                                          
        printf("\n");                                                  
    }                      
}
void prims(int arr[20][20],int n)                                          
{                                                                          
    int edge=0,p=0;                                                            
    int selected[n];                                                        
    for(int i=0;i<n;i++)                                            
    selected[i]=0;                                                  
    selected[0]=1;
    while(edge<n-1)                                                        
    {                                                                      
        int x=0,y=0,min=99;                                                
        for(int i=0;i<n;i++)                                                
        {
            if(selected[i]==1)                                              
            {                                                              
                for(int j=0;j<n;j++)                                        
                {                                                          
                    if(selected[j]==0 && arr[i][j])                        
                    {                                                  
                        if(min>arr[i][j])                              
                        {                                              
                            min=arr[i][j];                                  
                            x=i;                                            
                            y=j;                                        
                        }                                              
                    }                                                      
                }                                                      
            }                                                                
        }
        printf("\n%d - %d : %d",x,y,arr[x][y]);                      
        selected[y]=1;
        p=p+arr[x][y];
        edge++;                                                            
        }  
    printf("%d/n",p);
}
int main()                            
{                    
int n,arr[20][20];                                                  
printf("enter no of nodes");                                            
scanf("%d",&n);                                                    
create(arr,n);                                                          
display(arr,n);                                                        
prims(arr,n);                                                              
}

___________________________________________________________________________________________



#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define inf 9999
int mindist(int dist[],int visited[]){
	int min=inf,
	mi=0;
	for(int i=0;i<9;i++){
		if(dist[i]<min&&!(visited[i])){
			min=dist[i];
			mi=i;
		}
	}
	return mi;
}
int main(){
	int graph[10][10]={
	{0,4,inf,inf,inf,inf,inf,8,inf},
	{4,0,8,inf,inf,inf,inf,11,inf},{
	inf,8,0,7,inf,4,inf,inf,2},
	{inf,inf,7,0,9,14,inf,inf,inf},
	{inf,inf,inf,9,0,10,inf,inf,inf},
	{inf,inf,4,inf,10,0,2,inf,inf},
	{inf,inf,inf,inf,inf,2,0,1,6},
	{8,11,inf,inf,inf,inf,1,0,7},
	{inf,inf,2,inf,inf,inf,6,7,0}
	};
	int visited[9],dist[9],no_edge;
	for(int i=0;i<9;i++)
	{
	visited[i]=0;
	dist[i]="inf";
    }
	visited[0]=1;
	dist[0]=0;
	while(no_edge<9)
	{
	int u=mindist(dist,visited);
	visited[u]=1;
	for (int i = 0; i < 9; i++)
             if (dist[u]+graph[u][i]<dist[i] && !visited[i])
                 dist[i]=dist[u]+graph[u][i];
        no_edge++;
    }
printf("Vertex Cost\n");
for(int i=0;i<9;i++)
printf("%d %d\n",i,dist[i]);
	}

-------------------------------------------------------------------------------------------------------------------------------------------------



#include<stdlib.h>
#include<stdio.h>
#include<string.h>
#define inf 99999
int bellman(int v,int e,int g[][3],int src){
	int dist[v];
	for(int i=0;i<v;i++)
	    dist[i]=inf;
	dist[src]=0;
	for(int i=0;i<v-1;i++){
		for(int j=0;j<e;j++){
			if(dist[g[j][0]]!=inf &&dist[g[j][0]]+g[j][2]<dist[g[j][1]])
			     dist[g[j][1]]=dist[g[j][0]]+g[j][2];
		}
	}
	for(int j=0;j<e;j++){
		if(dist[g[j][0]]+g[j][2]<dist[g[j][1]])
		   printf("\n Negative cycles present in the graph");	
	}
	printf("Minimum distance from source vertex to all vertices");
	for(int i=0;i<v;i++)
	    printf("\n %d -%d -> %d",src,i+1,dist[i]);
}
int main(){
	int v,e,src;
	printf("\n Enter the no.of vertices,no.of edges and source vertex");
	scanf("%d%d%d",&v,&e,&src);
	int g[e][3];
	printf("\n Enter source vertex destination vertex and its distance");
	for(int i=0;i<e;i++){
		for(int j=0;j<3;j++){
		scanf("%d",&g[i][j]);
	}
}
	bellman(v,e,g,src);
	
}

___________________________________________________________________________________________




#include<stdio.h>
#include<stdlib.h>
int min(int a,int b){
	if(a<b)
	   return a;
	else
	   return b;
}
int coinchange(int ind,int tgt,int coins[] ){
	if(ind==0){
		if(tgt%coins[0]==0)
		    return tgt/coins[0];
		else
		    return -1;
	}
	int nottake=coinchange(ind-1,tgt,coins);
	int take=INT_MAX;
	if(coins[ind]<=tgt){
		take=1+coinchange(ind,tgt-coins[ind],coins);	
	}
	return min(take,nottake);
}
int main(){
	int n,tgt,res;
	printf("\n Enter no.of different denominations");
	scanf("%d",&n);
	int coins[10];
	for(int i=0;i<n;i++){
		scanf("%d",&coins[i]);
	}
	printf("\n Enter the target");
	scanf("%d",&tgt);
	res=coinchange(n-1,tgt,coins);
	printf("%d ",res);
}

___________________________________________________________________________________________

#include<stdio.h>
#include<stdlib.h>
int n;
int place(int k,int i,int x[]){
  for(int j=0;j<k-1;j++){
    if((x[j]==i) || (abs(j+1-k)==abs(x[j]-i)))
      return 0;
  }
  return 1;
}
void Nqueen(int k,int x[]){
  for(int i=1;i<=n;i++){
    if(place(k,i,x)){
      x[k-1]=i;
      if(k==n){
        for(int j=0;j<n;j++){
          printf("%d ",x[j]);}
        printf("\n");
      }
      else{
        Nqueen(k+1,x);
      }
  }
}
}
int main(){
  printf("Enter the no. of Queens:");
  scanf("%d",&n);
  int x[n];
  printf("The Solution Sets are:\n");
  Nqueen(1,x);
}




__________________________________________________________________________________________


#include <stdio.h>
#include <string.h>

void compute_prefix_function(char p[], int pi[]) {
    int m = strlen(p);
    int k = 0, q;
    pi[1] = 0;
    for (q = 2; q <= m; q++) {
        while (k > 0 && p[k] != p[q - 1]) {
            k = pi[k];
        }
        if (p[k] == p[q - 1]) {
            k = k + 1;
        }
        pi[q] = k;
    }
}

void kmp(char t[], char p[]) {
    int n = strlen(t);
    int m = strlen(p);
    int pi[m + 1];
    compute_prefix_function(p, pi);
    int q = 0, i;
    for (i = 0; i < n; i++) {
        while (q > 0 && p[q] != t[i]) {
            q = pi[q];
        }
        if (p[q] == t[i]) {
            q = q + 1;
        }
        if (q == m) {
            printf("Pattern occurs with shift %d\n", i - m + 1);
            q = pi[q];
        }
    }
}

int main() 
{
    char t[20], p[20];
    printf("\nEnter the text: ");
    scanf("%s", t);
    printf("\nEnter the pattern: ");
    scanf("%s", p);
    kmp(t, p);
    return 0;
}

-------------------------------------------------------------------------------------------------------------------